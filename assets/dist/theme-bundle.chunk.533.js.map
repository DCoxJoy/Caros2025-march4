{"version":3,"file":"theme-bundle.chunk.533.js","mappings":"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","sources":["webpack://bigcommerce-caros/./assets/js/theme/common/state-country.js","webpack://bigcommerce-caros/./assets/js/theme/common/models/forms.js","webpack://bigcommerce-caros/./assets/js/theme/common/form-validation.js","webpack://bigcommerce-caros/./assets/js/theme/common/form-utils.js","webpack://bigcommerce-caros/./assets/js/theme/auth.js"],"sourcesContent":["import utils from '@bigcommerce/stencil-utils';\nimport _ from 'lodash';\nimport { insertStateHiddenField } from './form-utils';\nimport { showAlertModal } from '../global/modal';\n\n/**\n * If there are no options from bcapp, a text field will be sent. This will create a select element to hold options after the remote request.\n * @returns {jQuery|HTMLElement}\n */\nfunction makeStateRequired(stateElement, context) {\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\n        const ret = result;\n        ret[item.name] = item.value;\n        return ret;\n    });\n\n    const replacementAttributes = {\n        id: attrs.id,\n        'data-label': attrs['data-label'],\n        class: 'form-select',\n        name: attrs.name,\n        'data-field-type': attrs['data-field-type'],\n    };\n\n    stateElement.replaceWith($('<select></select>', replacementAttributes));\n\n    const $newElement = $('[data-field-type=\"State\"]');\n    const $hiddenInput = $('[name*=\"FormFieldIsText\"]');\n\n    if ($hiddenInput.length !== 0) {\n        $hiddenInput.remove();\n    }\n\n    if ($newElement.prev().find('small').length === 0) {\n        // String is injected from localizer\n        $newElement.prev().append(`<small>${context.required}</small>`);\n    } else {\n        $newElement.prev().find('small').show();\n    }\n\n    return $newElement;\n}\n\n/**\n * If a country with states is the default, a select will be sent,\n * In this case we need to be able to switch to an input field and hide the required field\n */\nfunction makeStateOptional(stateElement) {\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\n        const ret = result;\n        ret[item.name] = item.value;\n\n        return ret;\n    });\n\n    const replacementAttributes = {\n        type: 'text',\n        id: attrs.id,\n        'data-label': attrs['data-label'],\n        class: 'form-input',\n        name: attrs.name,\n        'data-field-type': attrs['data-field-type'],\n    };\n\n    stateElement.replaceWith($('<input />', replacementAttributes));\n\n    const $newElement = $('[data-field-type=\"State\"]');\n\n    if ($newElement.length !== 0) {\n        insertStateHiddenField($newElement);\n        $newElement.prev().find('small').hide();\n    }\n\n    return $newElement;\n}\n\n/**\n * Adds the array of options from the remote request to the newly created select box.\n * @param {Object} statesArray\n * @param {jQuery} $selectElement\n * @param {Object} options\n */\nfunction addOptions(statesArray, $selectElement, options) {\n    const container = [];\n\n    container.push(`<option value=\"\">${statesArray.prefix}</option>`);\n\n    if (!_.isEmpty($selectElement)) {\n        _.each(statesArray.states, (stateObj) => {\n            if (options.useIdForStates) {\n                container.push(`<option value=\"${stateObj.id}\">${stateObj.name}</option>`);\n            } else {\n                container.push(`<option value=\"${stateObj.name}\">${stateObj.name}</option>`);\n            }\n        });\n\n        $selectElement.html(container.join(' '));\n    }\n}\n\n/**\n *\n * @param {jQuery} stateElement\n * @param {Object} context\n * @param {Object} options\n * @param {Function} callback\n */\nexport default function (stateElement, context = {}, options, callback) {\n    /**\n     * Backwards compatible for three parameters instead of four\n     *\n     * Available options:\n     *\n     * useIdForStates {Bool} - Generates states dropdown using id for values instead of strings\n     */\n    if (typeof options === 'function') {\n        /* eslint-disable no-param-reassign */\n        callback = options;\n        options = {};\n        /* eslint-enable no-param-reassign */\n    }\n\n    $('select[data-field-type=\"Country\"]').on('change', event => {\n        const countryName = $(event.currentTarget).val();\n\n        if (countryName === '') {\n            return;\n        }\n\n        utils.api.country.getByName(countryName, (err, response) => {\n            if (err) {\n                showAlertModal(context.state_error);\n                return callback(err);\n            }\n\n            const $currentInput = $('[data-field-type=\"State\"]');\n\n            if (!_.isEmpty(response.data.states)) {\n                // The element may have been replaced with a select, reselect it\n                const $selectElement = makeStateRequired($currentInput, context);\n\n                addOptions(response.data, $selectElement, options);\n                callback(null, $selectElement);\n            } else {\n                const newElement = makeStateOptional($currentInput, context);\n\n                callback(null, newElement);\n            }\n        });\n    });\n}\n","const forms = {\n    email(value) {\n        const re = /^.+@.+\\..+/;\n        return re.test(value);\n    },\n\n    /**\n     * Validates a password field\n     * @param value\n     * @returns {boolean}\n     */\n    password(value) {\n        return this.notEmpty(value);\n    },\n\n    /**\n     * validates if a field is empty\n     * @param value\n     * @returns {boolean}\n     *\n     */\n    notEmpty(value) {\n        return value.length > 0;\n    },\n};\n\nexport default forms;\n","/**\n * Validate that the given date for the day/month/year select inputs is within potential range\n * @param $formField\n * @param validation\n * @returns {{selector: string, triggeredBy: string, validate: Function, errorMessage: string}}\n */\nfunction buildDateValidation($formField, validation) {\n    // No date range restriction, skip\n    if (validation.min_date && validation.max_date) {\n        const invalidMessage = `Your chosen date must fall between ${validation.min_date} and ${validation.max_date}.`;\n        const formElementId = $formField.attr('id');\n        const minSplit = validation.min_date.split('-');\n        const maxSplit = validation.max_date.split('-');\n        const minDate = new Date(minSplit[0], minSplit[1] - 1, minSplit[2]);\n        const maxDate = new Date(maxSplit[0], maxSplit[1] - 1, maxSplit[2]);\n\n        return {\n            selector: `#${formElementId} select[data-label=\"year\"]`,\n            triggeredBy: `#${formElementId} select:not([data-label=\"year\"])`,\n            validate: (cb, val) => {\n                const day = Number($formField.find('select[data-label=\"day\"]').val());\n                const month = Number($formField.find('select[data-label=\"month\"]').val()) - 1;\n                const year = Number(val);\n                const chosenDate = new Date(year, month, day);\n\n                cb(chosenDate >= minDate && chosenDate <= maxDate);\n            },\n            errorMessage: invalidMessage,\n        };\n    }\n}\n\n/**\n * We validate checkboxes separately from single input fields, as they must have at least one checked option\n * from many different inputs\n * @param $formField\n * @param validation\n */\nfunction buildRequiredCheckboxValidation($formField, validation) {\n    const formFieldId = $formField.attr('id');\n    const primarySelector = `#${formFieldId} input:first-of-type`;\n    const secondarySelector = `#${formFieldId} input`;\n\n    return {\n        selector: primarySelector,\n        triggeredBy: secondarySelector,\n        validate: (cb) => {\n            let result = false;\n\n            $(secondarySelector).each((index, checkbox) => {\n                if (checkbox.checked) {\n                    result = true;\n\n                    return false;\n                }\n            });\n\n            cb(result);\n        },\n        errorMessage: `The '${validation.label}' field cannot be blank.`,\n    };\n}\n\nfunction buildRequiredValidation(validation, selector) {\n    return {\n        selector,\n        validate(cb, val) {\n            cb(val.length > 0);\n        },\n        errorMessage: `The '${validation.label}' field cannot be blank.`,\n    };\n}\n\nfunction buildNumberRangeValidation(validation, formFieldSelector) {\n    const invalidMessage = `The value for ${validation.label} must be between ${validation.min} and ${validation.max}.`;\n    const min = Number(validation.min);\n    const max = Number(validation.max);\n\n    return {\n        selector: `${formFieldSelector} input[name=\"${validation.name}\"]`,\n        validate: (cb, val) => {\n            const numberVal = Number(val);\n\n            cb(numberVal >= min && numberVal <= max);\n        },\n        errorMessage: invalidMessage,\n    };\n}\n\n\nfunction buildValidation($validateableElement) {\n    const validation = $validateableElement.data('validation');\n    const fieldValidations = [];\n    const formFieldSelector = `#${$validateableElement.attr('id')}`;\n\n    if (validation.type === 'datechooser') {\n        const dateValidation = buildDateValidation($validateableElement, validation);\n\n        if (dateValidation) {\n            fieldValidations.push(dateValidation);\n        }\n    } else if (validation.required && (validation.type === 'checkboxselect' || validation.type === 'radioselect')) {\n        fieldValidations.push(buildRequiredCheckboxValidation($validateableElement, validation));\n    } else {\n        $validateableElement.find('input, select, textarea').each((index, element) => {\n            const $inputElement = $(element);\n            const tagName = $inputElement.get(0).tagName;\n            const inputName = $inputElement.attr('name');\n            const elementSelector = `${formFieldSelector} ${tagName}[name=\"${inputName}\"]`;\n\n            if (validation.type === 'numberonly') {\n                fieldValidations.push(buildNumberRangeValidation(validation, formFieldSelector));\n            }\n            if (validation.required) {\n                fieldValidations.push(buildRequiredValidation(validation, elementSelector));\n            }\n        });\n    }\n\n    return fieldValidations;\n}\n\n/**\n * Builds the validation model for dynamic forms\n * @param $form\n * @returns {Array}\n */\nexport default function ($form) {\n    let validationsToPerform = [];\n\n    $form.find('[data-validation]').each((index, input) => {\n        validationsToPerform = validationsToPerform.concat(buildValidation($(input)));\n    });\n\n    return validationsToPerform;\n}\n","import _ from 'lodash';\nimport nod from './nod';\nimport forms from './models/forms';\n\nconst inputTagNames = [\n    'input',\n    'select',\n    'textarea',\n];\n\n/**\n * Apply class name to an input element on its type\n * @param {object} input\n * @param {string} formFieldClass\n * @return {object} Element itself\n */\nfunction classifyInput(input, formFieldClass) {\n    const $input = $(input);\n    const $formField = $input.parent(`.${formFieldClass}`);\n    const tagName = $input.prop('tagName').toLowerCase();\n\n    let className = `${formFieldClass}--${tagName}`;\n    let specificClassName;\n\n    // Input can be text/checkbox/radio etc...\n    if (tagName === 'input') {\n        const inputType = $input.prop('type');\n\n        if (_.includes(['radio', 'checkbox', 'submit'], inputType)) {\n            // ie: .form-field--checkbox, .form-field--radio\n            className = `${formFieldClass}--${_.camelCase(inputType)}`;\n        } else {\n            // ie: .form-field--input .form-field--inputText\n            specificClassName = `${className}${_.capitalize(inputType)}`;\n        }\n    }\n\n    // Apply class modifier\n    return $formField\n        .addClass(className)\n        .addClass(specificClassName);\n}\n\n/**\n * Apply class name to each input element in a form based on its type\n * @example\n * // Before\n * <form id=\"form\">\n *     <div class=\"form-field\">\n *         <input type=\"text\">\n *     </div>\n *     <div class=\"form-field\">\n *         <select>...</select>\n *     </div>\n * </form>\n *\n * classifyForm('#form', { formFieldClass: 'form-field' });\n *\n * // After\n * <div class=\"form-field form-field--input form-field--inputText\">...</div>\n * <div class=\"form-field form-field--select\">...</div>\n *\n * @param {string|object} formSelector - selector or element\n * @param {object} options\n * @return {jQuery} Element itself\n */\nexport function classifyForm(formSelector, options = {}) {\n    const $form = $(formSelector);\n    const $inputs = $form.find(inputTagNames.join(', '));\n\n    // Obtain options\n    const { formFieldClass = 'form-field' } = options;\n\n    // Classify each input in a form\n    $inputs.each((__, input) => {\n        classifyInput(input, formFieldClass);\n    });\n\n    return $form;\n}\n\n/**\n * Get id from given field\n * @param {object} $field JQuery field object\n * @return {string}\n */\nfunction getFieldId($field) {\n    const fieldId = $field.prop('name').match(/(\\[.*\\])/);\n\n    if (fieldId && fieldId.length !== 0) {\n        return fieldId[0];\n    }\n\n    return '';\n}\n\n/**\n * Insert hidden field after State/Province field\n * @param {object} $stateField JQuery field object\n */\nfunction insertStateHiddenField($stateField) {\n    const fieldId = getFieldId($stateField);\n    const stateFieldAttrs = {\n        type: 'hidden',\n        name: `FormFieldIsText${fieldId}`,\n        value: '1',\n    };\n\n    $stateField.after($('<input />', stateFieldAttrs));\n}\n\nconst Validators = {\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     */\n    setEmailValidation: (validator, field) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a valid email.',\n            });\n        }\n    },\n\n    /**\n     * Validate password fields\n     * @param validator\n     * @param passwordSelector\n     * @param password2Selector\n     * @param requirements\n     * @param isOptional\n     */\n    setPasswordValidation: (validator, passwordSelector, password2Selector, requirements, isOptional) => {\n        const $password = $(passwordSelector);\n        const passwordValidations = [\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a password.',\n            },\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.match(new RegExp(requirements.alpha))\n                        && val.match(new RegExp(requirements.numeric))\n                        && val.length >= requirements.minlength;\n\n                    // If optional and nothing entered, it is valid\n                    if (isOptional && val.length === 0) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: requirements.error,\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a password.',\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val === $password.val();\n\n                    cb(result);\n                },\n                errorMessage: 'Your passwords do not match.',\n            },\n        ];\n\n        validator.add(passwordValidations);\n    },\n\n    /**\n     * Validate password fields\n     * @param {Nod} validator\n     * @param {Object} selectors\n     * @param {string} selectors.errorSelector\n     * @param {string} selectors.fieldsetSelector\n     * @param {string} selectors.formSelector\n     * @param {string} selectors.maxPriceSelector\n     * @param {string} selectors.minPriceSelector\n     */\n    setMinMaxPriceValidation: (validator, selectors) => {\n        const {\n            errorSelector,\n            fieldsetSelector,\n            formSelector,\n            maxPriceSelector,\n            minPriceSelector,\n        } = selectors;\n\n        validator.configure({\n            form: formSelector,\n            preventSubmit: true,\n            successClass: '_', // KLUDGE: Don't apply success class\n        });\n\n        validator.add({\n            errorMessage: 'Min price must be less than max. price.',\n            selector: minPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: 'Min price must be less than max. price.',\n            selector: maxPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: 'Max. price is required.',\n            selector: maxPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: 'Min. price is required.',\n            selector: minPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: 'Input must be greater than 0.',\n            selector: [minPriceSelector, maxPriceSelector],\n            validate: 'min-number:0',\n        });\n\n        validator.setMessageOptions({\n            selector: [minPriceSelector, maxPriceSelector],\n            parent: fieldsetSelector,\n            errorSpan: errorSelector,\n        });\n    },\n\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     */\n    setStateCountryValidation: (validator, field) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: 'presence',\n                errorMessage: 'The \\'State/Province\\' field cannot be blank.',\n            });\n        }\n    },\n\n    /**\n     * Removes classes from dirty form if previously checked\n     * @param field\n     */\n    cleanUpStateValidation: (field) => {\n        const $fieldClassElement = $((`[data-type=\"${field.data('fieldType')}\"]`));\n\n        Object.keys(nod.classes).forEach((value) => {\n            if ($fieldClassElement.hasClass(nod.classes[value])) {\n                $fieldClassElement.removeClass(nod.classes[value]);\n            }\n        });\n    },\n};\n\nexport { Validators, insertStateHiddenField };\n","import PageManager from './page-manager';\nimport stateCountry from './common/state-country';\nimport nod from './common/nod';\nimport validation from './common/form-validation';\nimport forms from './common/models/forms';\nimport { classifyForm, Validators } from './common/form-utils';\n\nexport default class Auth extends PageManager {\n    constructor(context) {\n        super(context);\n        this.formCreateSelector = 'form[data-create-account-form]';\n    }\n\n    registerLoginValidation($loginForm) {\n        const loginModel = forms;\n\n        this.loginValidator = nod({\n            submit: '.login-form input[type=\"submit\"]',\n        });\n\n        this.loginValidator.add([\n            {\n                selector: '.login-form input[name=\"login_email\"]',\n                validate: (cb, val) => {\n                    const result = loginModel.email(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.useValidEmail,\n            },\n            {\n                selector: '.login-form input[name=\"login_pass\"]',\n                validate: (cb, val) => {\n                    const result = loginModel.password(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.enterPass,\n            },\n        ]);\n\n        $loginForm.on('submit', event => {\n            this.loginValidator.performCheck();\n\n            if (this.loginValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    registerForgotPasswordValidation($forgotPasswordForm) {\n        this.forgotPasswordValidator = nod({\n            submit: '.forgot-password-form input[type=\"submit\"]',\n        });\n\n        this.forgotPasswordValidator.add([\n            {\n                selector: '.forgot-password-form input[name=\"email\"]',\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.useValidEmail,\n            },\n        ]);\n\n        $forgotPasswordForm.on('submit', event => {\n            this.forgotPasswordValidator.performCheck();\n\n            if (this.forgotPasswordValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    registerNewPasswordValidation() {\n        const newPasswordForm = '.new-password-form';\n        const newPasswordValidator = nod({\n            submit: $(`${newPasswordForm} input[type=\"submit\"]`),\n        });\n        const passwordSelector = $(`${newPasswordForm} input[name=\"password\"]`);\n        const password2Selector = $(`${newPasswordForm} input[name=\"password_confirm\"]`);\n\n        Validators.setPasswordValidation(\n            newPasswordValidator,\n            passwordSelector,\n            password2Selector,\n            this.passwordRequirements,\n        );\n    }\n\n    registerCreateAccountValidator($createAccountForm) {\n        const validationModel = validation($createAccountForm);\n        const createAccountValidator = nod({\n            submit: `${this.formCreateSelector} input[type='submit']`,\n        });\n        const $stateElement = $('[data-field-type=\"State\"]');\n        const emailSelector = `${this.formCreateSelector} [data-field-type='EmailAddress']`;\n        const $emailElement = $(emailSelector);\n        const passwordSelector = `${this.formCreateSelector} [data-field-type='Password']`;\n        const $passwordElement = $(passwordSelector);\n        const password2Selector = `${this.formCreateSelector} [data-field-type='ConfirmPassword']`;\n        const $password2Element = $(password2Selector);\n\n        createAccountValidator.add(validationModel);\n\n        if ($stateElement) {\n            let $last;\n\n            // Requests the states for a country with AJAX\n            stateCountry($stateElement, this.context, (err, field) => {\n                if (err) {\n                    throw new Error(err);\n                }\n\n                const $field = $(field);\n\n                if (createAccountValidator.getStatus($stateElement) !== 'undefined') {\n                    createAccountValidator.remove($stateElement);\n                }\n\n                if ($last) {\n                    createAccountValidator.remove($last);\n                }\n\n                if ($field.is('select')) {\n                    $last = field;\n                    Validators.setStateCountryValidation(createAccountValidator, field);\n                } else {\n                    Validators.cleanUpStateValidation(field);\n                }\n            });\n        }\n\n        if ($emailElement) {\n            createAccountValidator.remove(emailSelector);\n            Validators.setEmailValidation(createAccountValidator, emailSelector);\n        }\n\n        if ($passwordElement && $password2Element) {\n            createAccountValidator.remove(passwordSelector);\n            createAccountValidator.remove(password2Selector);\n            Validators.setPasswordValidation(\n                createAccountValidator,\n                passwordSelector,\n                password2Selector,\n                this.passwordRequirements,\n            );\n        }\n\n        $createAccountForm.on('submit', event => {\n            createAccountValidator.performCheck();\n\n            if (createAccountValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    /**\n     * Request is made in this function to the remote endpoint and pulls back the states for country.\n     */\n    onReady() {\n        const $createAccountForm = classifyForm(this.formCreateSelector);\n        const $loginForm = classifyForm('.login-form');\n        const $forgotPasswordForm = classifyForm('.forgot-password-form');\n        const $newPasswordForm = classifyForm('.new-password-form'); // reset password\n\n        // Injected via auth.html\n        this.passwordRequirements = this.context.passwordRequirements;\n\n        if ($loginForm.length) {\n            this.registerLoginValidation($loginForm);\n        }\n\n        if ($newPasswordForm.length) {\n            this.registerNewPasswordValidation();\n        }\n\n        if ($forgotPasswordForm.length) {\n            this.registerForgotPasswordValidation($forgotPasswordForm);\n        }\n\n        if ($createAccountForm.length) {\n            this.registerCreateAccountValidator($createAccountForm);\n        }\n    }\n}\n"],"names":["stateElement","context","options","callback","$","on","event","countryName","currentTarget","val","utils","country","getByName","err","response","showAlertModal","state_error","$currentInput","_isEmpty","data","states","newElement","attrs","_transform","prop","result","item","ret","name","value","replacementAttributes","type","id","class","replaceWith","$newElement","length","insertStateHiddenField","prev","find","hide","makeStateOptional","$selectElement","$hiddenInput","remove","append","required","show","makeStateRequired","statesArray","container","push","prefix","_each","stateObj","useIdForStates","html","join","addOptions","email","test","password","this","notEmpty","$form","validationsToPerform","each","index","input","concat","$validateableElement","validation","fieldValidations","formFieldSelector","attr","dateValidation","$formField","min_date","max_date","invalidMessage","formElementId","minSplit","split","maxSplit","minDate","Date","maxDate","selector","triggeredBy","validate","cb","day","Number","month","year","chosenDate","errorMessage","buildDateValidation","element","$inputElement","tagName","get","inputName","elementSelector","label","min","max","numberVal","buildNumberRangeValidation","buildRequiredValidation","formFieldId","secondarySelector","checkbox","checked","buildRequiredCheckboxValidation","buildValidation","inputTagNames","classifyForm","formSelector","$inputs","_options$formFieldCla","formFieldClass","__","specificClassName","$input","parent","toLowerCase","className","inputType","_includes","_camelCase","_capitalize","addClass","classifyInput","$stateField","$field","fieldId","stateFieldAttrs","match","after","Validators","setEmailValidation","validator","field","add","forms","setPasswordValidation","passwordSelector","password2Selector","requirements","isOptional","$password","passwordValidations","RegExp","alpha","numeric","minlength","error","setMinMaxPriceValidation","selectors","errorSelector","fieldsetSelector","maxPriceSelector","minPriceSelector","configure","form","preventSubmit","successClass","setMessageOptions","errorSpan","setStateCountryValidation","cleanUpStateValidation","$fieldClassElement","Object","keys","nod","classes","forEach","hasClass","removeClass","Auth","_PageManager","_this","call","formCreateSelector","_proto","prototype","registerLoginValidation","$loginForm","_this2","loginModel","loginValidator","submit","useValidEmail","enterPass","performCheck","areAll","preventDefault","registerForgotPasswordValidation","$forgotPasswordForm","_this3","forgotPasswordValidator","registerNewPasswordValidation","newPasswordForm","newPasswordValidator","passwordRequirements","registerCreateAccountValidator","$createAccountForm","$last","validationModel","createAccountValidator","$stateElement","emailSelector","$emailElement","$passwordElement","$password2Element","stateCountry","Error","getStatus","is","onReady","$newPasswordForm","PageManager"],"sourceRoot":""}